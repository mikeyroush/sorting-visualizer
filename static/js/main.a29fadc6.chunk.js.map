{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["mergeSort","array","length","animations","merge","left","right","middle","Math","floor","n1","n2","leftArray","Array","rightArray","i","j","k","push","sort","MAX_BAR_COUNT","SortingVisualizer","props","state","timers","barCount","animationSpeedMilli","this","resetArray","forEach","timer","clearTimeout","arrayBars","document","getElementsByClassName","from","bar","classList","remove","min","max","random","setState","count","barOneIdx","barTwoIdx","barOne","barTwo","setTimeout","toggle","newHeight","style","height","className","map","value","idx","onClick","mergeSortAnimator","Slider","defaultValue","getAriaValueText","aria-labelledby","step","valueLabelDisplay","marks","label","onChange","event","setBarCountAndSpeed","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a29fadc6.chunk.js","sourcesContent":["/* eslint-disable require-jsdoc */\nexport const mergeSort = (array) => {\n  if (array.length <= 1) return array;\n  const animations = [];\n  merge(array, 0, array.length - 1, animations);\n  return { animations: animations, array: array };\n};\n\nfunction merge(array, left, right, animations) {\n  if (left < right) {\n    // Find middle point\n    const middle = Math.floor(left + (right - left) / 2);\n\n    // sort the havles\n    merge(array, left, middle, animations);\n    merge(array, middle + 1, right, animations);\n\n    // merge the sorted halves\n    sort(array, left, middle, right, animations);\n  }\n}\n\nfunction sort(array, left, middle, right, animations) {\n  // Find sizes of arrays\n  const n1 = middle - left + 1;\n  const n2 = right - middle;\n\n  // Create temp arrays\n  const leftArray = new Array(n1);\n  const rightArray = new Array(n2);\n\n  // Copy data to temp arrays\n  for (let i = 0; i < n1; i++) {\n    leftArray[i] = array[left + i];\n  }\n  for (let j = 0; j < n2; j++) {\n    rightArray[j] = array[middle + 1 + j];\n  }\n\n  // Merge temp arrays\n  let i = 0;\n  let j = 0;\n  let k = left;\n  while (i < n1 && j < n2) {\n    // push the comparison indices to the comparison array twice\n    animations.push([left + i, middle + 1 + j]);\n    // once to change the color and then again to change the color back\n    animations.push([left + i, middle + 1 + j]);\n    if (leftArray[i] < rightArray[j]) {\n      // we overwrite the value at pos k in the original array with the value\n      // at position i in the left array\n      animations.push([k, leftArray[i]]);\n      array[k++] = leftArray[i++];\n    } else {\n      // we overwrite the value at pos k in the original array with the value\n      // at position j in the right array\n      animations.push([k, rightArray[j]]);\n      array[k++] = rightArray[j++];\n    }\n  }\n\n  // Copy remaining elements if any\n  while (i < n1) {\n    // push the comparison indices to the comparison array twice\n    animations.push([left + i, left + i]);\n    // once to change the color and then again to change the color back\n    animations.push([left + i, left + i]);\n    // we overwrite the value at pos k in the original array with the value\n    // at position i in the left array\n    animations.push([k, leftArray[i]]);\n    array[k++] = leftArray[i++];\n  }\n  while (j < n2) {\n    // push the comparison indices to the comparison array twice\n    animations.push([middle + 1 + j, middle + 1 + j]);\n    // once to change the color and then again to change the color back\n    animations.push([middle + 1 + j, middle + 1 + j]);\n    // we overwrite the value at pos k in the original array with the value\n    // at position j in the right array\n    animations.push([k, rightArray[j]]);\n    array[k++] = rightArray[j++];\n  }\n}\n","/* eslint-disable prettier/prettier */\n/* eslint-disable require-jsdoc */\nimport React from \"react\";\nimport { mergeSort } from \"../SortingAlgorithms/MergeSort.js\";\nimport Slider from '@material-ui/core/Slider';\n\n// Min and max bar count\nconst MIN_BAR_COUNT = 10;\nconst MAX_BAR_COUNT = 100;\n\nexport default class SortingVisualizer extends React.Component {\n  // Constructor\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // Array of bar heights\n      array: [],\n      // Array of timers for our animations\n      timers: [],\n      // Number of bars\n      barCount: 16,\n      // Speed of animation in milliseconds\n      animationSpeedMilli: 150\n    };\n  }\n\n  // Triggered when the component mounts\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  // Helper function to reset the array\n  resetArray() {\n    // Clear timers for previous animations\n    this.state.timers.forEach(timer => {\n      clearTimeout(timer);\n    });\n    // Remove active color from bars if they got stuck in transition\n    const arrayBars = document.getElementsByClassName('array-bar');\n    Array.from(arrayBars).forEach(bar => {\n      bar.classList.remove(\"bg-indigo-700\");\n    });\n    // Reseed bar heights\n    const array = [];\n    for (let i = 0; i < this.state.barCount; i++) {\n      array.push(randomIntFromInterval(5, 100));\n    }\n    // Set state\n    this.setState({\n      timers: [],\n      array: array\n    });\n  }\n\n  // Helper function to change the bar count and animation speed\n  setBarCountAndSpeed(count) {\n    this.setState({\n      barCount: count,\n      animationSpeedMilli: (1 - (count - 1)/MAX_BAR_COUNT) * 150\n    })\n  }\n\n  // Helper function to control merge sort animation\n  mergeSortAnimator() {\n    const animations = mergeSort(this.state.array).animations;\n    for (let i = 0; i < animations.length; i++) {\n      // Get the bars that are on the screen\n      const arrayBars = document.getElementsByClassName('array-bar');\n      // There are three operations in the animation\n      // The comparison color, the original color, and the swap\n      // The third operation is not a color change\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOne = arrayBars[barOneIdx];\n        const barTwo = arrayBars[barTwoIdx];\n        const timer = () => setTimeout(() => {\n          barOne.classList.toggle(\"bg-indigo-700\");\n          if (barOne !== barTwo) barTwo.classList.toggle(\"bg-indigo-700\");\n        }, i * this.state.animationSpeedMilli);\n        this.state.timers.push(timer());\n      } else {\n        const timer = () => setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style\n          barOneStyle.height = `${newHeight}%`\n        }, i * this.state.animationSpeedMilli);\n        this.state.timers.push(timer());\n      }\n    }\n  }\n\n  // Controls what renders the screen\n  render() {\n    const { array, barCount } = this.state;\n\n    return (\n      <>\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{ height: `${value}%` }}\n            ></div>\n          ))}\n        </div>\n        <div className=\"flex space-x-2\">\n          <button className=\"btn\" onClick={() => {this.resetArray()}}>Generate New Arrary</button>\n          <button className=\"btn\" onClick={() => {this.mergeSortAnimator()}}>Merge Sort</button>\n        </div>\n        <div className=\"flex space-x-2 w-1/2 max-w-6xl\">\n          <Slider\n            defaultValue={barCount}\n            getAriaValueText={(value) => {return `${value} Bars`;}}\n            aria-labelledby=\"discrete-bar-slider\"\n            step={1}\n            min={MIN_BAR_COUNT}\n            max={MAX_BAR_COUNT}\n            valueLabelDisplay=\"auto\"\n            marks={[\n              { value: MIN_BAR_COUNT, label: `${MIN_BAR_COUNT} Bars` }, \n              { value: MAX_BAR_COUNT, label: `${MAX_BAR_COUNT} Bars` },\n            ]}\n            onChange={(event, value) => { this.setBarCountAndSpeed(value) }}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\n// From Stack Overflow\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./index.css\";\n\n// eslint-disable-next-line require-jsdoc\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}