{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["mergeSort","array","length","animations","merge","left","right","middle","Math","floor","n1","n2","leftArray","Array","rightArray","i","j","k","push","sort","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOne","barTwo","setTimeout","classList","toggle","newHeight","style","height","javaSortedArray","slice","a","b","sortedArray","console","log","arrayOne","arrayTwo","arraysAreEqual","className","map","value","idx","onClick","mergeSortAnimator","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6a30c807.chunk.js","sourcesContent":["/* eslint-disable require-jsdoc */\nexport const mergeSort = (array) => {\n  if (array.length <= 1) return array;\n  const animations = [];\n  merge(array, 0, array.length - 1, animations);\n  return { animations: animations, array: array };\n};\n\nfunction merge(array, left, right, animations) {\n  if (left < right) {\n    // Find middle point\n    const middle = Math.floor(left + (right - left) / 2);\n\n    // sort the havles\n    merge(array, left, middle, animations);\n    merge(array, middle + 1, right, animations);\n\n    // merge the sorted halves\n    sort(array, left, middle, right, animations);\n  }\n}\n\nfunction sort(array, left, middle, right, animations) {\n  // Find sizes of arrays\n  const n1 = middle - left + 1;\n  const n2 = right - middle;\n\n  // Create temp arrays\n  const leftArray = new Array(n1);\n  const rightArray = new Array(n2);\n\n  // Copy data to temp arrays\n  for (let i = 0; i < n1; i++) {\n    leftArray[i] = array[left + i];\n  }\n  for (let j = 0; j < n2; j++) {\n    rightArray[j] = array[middle + 1 + j];\n  }\n\n  // Merge temp arrays\n  let i = 0;\n  let j = 0;\n  let k = left;\n  while (i < n1 && j < n2) {\n    // push the comparison indices to the comparison array twice\n    animations.push([left + i, middle + 1 + j]);\n    // once to change the color and then again to change the color back\n    animations.push([left + i, middle + 1 + j]);\n    if (leftArray[i] < rightArray[j]) {\n      // we overwrite the value at pos k in the original array with the value\n      // at position i in the left array\n      animations.push([k, leftArray[i]]);\n      array[k++] = leftArray[i++];\n    } else {\n      // we overwrite the value at pos k in the original array with the value\n      // at position j in the right array\n      animations.push([k, rightArray[j]]);\n      array[k++] = rightArray[j++];\n    }\n  }\n\n  // Copy remaining elements if any\n  while (i < n1) {\n    // push the comparison indices to the comparison array twice\n    animations.push([left + i, left + i]);\n    // once to change the color and then again to change the color back\n    animations.push([left + i, left + i]);\n    // we overwrite the value at pos k in the original array with the value\n    // at position i in the left array\n    animations.push([k, leftArray[i]]);\n    array[k++] = leftArray[i++];\n  }\n  while (j < n2) {\n    // push the comparison indices to the comparison array twice\n    animations.push([middle + 1 + j, middle + 1 + j]);\n    // once to change the color and then again to change the color back\n    animations.push([middle + 1 + j, middle + 1 + j]);\n    // we overwrite the value at pos k in the original array with the value\n    // at position j in the right array\n    animations.push([k, rightArray[j]]);\n    array[k++] = rightArray[j++];\n  }\n}\n","/* eslint-disable prettier/prettier */\n/* eslint-disable require-jsdoc */\nimport React from \"react\";\nimport { mergeSort } from \"../SortingAlgorithms/MergeSort.js\";\n\n// Speed of animation in milliseconds\nconst ANIMATION_SPEED_MS = 25;\n\n// Number of bars\nconst BAR_COUNT = 16;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < BAR_COUNT; i++) {\n      array.push(randomIntFromInterval(5, 100));\n    }\n    this.setState({ array });\n  }\n\n  mergeSortAnimator() {\n    const animations = mergeSort(this.state.array).animations;\n    for (let i = 0; i < animations.length; i++) {\n      // Get the bars that are on the screen\n      const arrayBars = document.getElementsByClassName('array-bar');\n      // There are three operations in the animation\n      // The comparison color, the original color, and the swap\n      // The third operation is not a color change\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOne = arrayBars[barOneIdx];\n        const barTwo = arrayBars[barTwoIdx];\n        // const barOneStyle = arrayBars[barOneIdx].style;\n        // const barTwoStyle = arrayBars[barTwoIdx].style;\n        // const color = i % 3 === 0 ? 'turquoise' : 'purple'\n        setTimeout(() => {\n          barOne.classList.toggle(\"bg-indigo-700\");\n          barTwo.classList.toggle(\"bg-indigo-700\");\n          // barOneStyle.backgroundColor = color;\n          // barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style\n          barOneStyle.height = `${newHeight}%`\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  \n  testSortingAlgorithms() {\n    const javaSortedArray = this.state.array\n    .slice()\n    .sort((a, b) => a - b);\n    const sortedArray = mergeSort(this.state.array, 0, this.state.array.length - 1).array;\n\n    // console.log(javaSortedArray);\n    // console.log(sortedArray);\n    console.log(arraysAreEqual(javaSortedArray, sortedArray));\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <>\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{ height: `${value}%` }}\n            ></div>\n          ))}\n        </div>\n        <div className=\"flex space-x-2\">\n          <button className=\"btn\" onClick={() => {this.resetArray()}}>Generate New Arrary</button>\n          <button className=\"btn\" onClick={() => {this.mergeSortAnimator()}}>Merge Sort</button>\n          {/* <button className=\"btn\" onClick={() => {this.testSortingAlgorithms()}}>Test Algorithms</button> */}\n        </div>\n      </>\n    );\n  }\n}\n\n// From Stack Overflow\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length != arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] != arrayTwo[i]) return false;\n  }\n  return true;\n}","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./index.css\";\n\n// eslint-disable-next-line require-jsdoc\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}